#ifndef PARTICLE_CHAIN_H
#define PARTICLE_CHAIN_H
#include "particle.h"

class particle_chain
{
public:
	particle_chain();
	~particle_chain();
	void insert_node (float x,float y,float width);
	void delete_node();
	int get_num();
	particle *get_head();
	particle *get_current();
	void reset();
	void reset_w();
	particle *head,*end,*current;
	int Num;
private:
	int aa;
};

particle_chain::particle_chain()
{
	head = 0;
	end = 0;
	Num=0;
	current = 0;
}
void particle_chain::insert_node(float x,float y,float width)
{
	if (head ==0)
	{
		head =new particle(x,y,width);
		end = head;
		head->pre=0;
		head->next=0;
	}
	else
	{
		end->next=new particle(x,y,width);
		end->next->pre=end;
		end = end->next;
		end->next=0;

	}
	Num++;
}
particle *particle_chain::get_head()
{
	return head;
}
void particle_chain::delete_node()
{
	if(!head)return;
	particle *p=current;
	p->pre->next=p->next;
	p->next->pre=p->pre;
	current=p->next;
	delete p;
	Num--;
}
int particle_chain::get_num()
{

	return Num;
}
void particle_chain::reset()
{

	current =head;
}
particle *particle_chain::get_current()
{

	return current;
} 
particle_chain::~particle_chain()
{
}

void particle_chain::reset_w()
{
	float w=0;
	particle *p=head;
	while (p)
	{
		w+=p->width;
	}
	p=head;
	while (p)
	{
		p->width=p->width*1/w;
	}
}
#endif
