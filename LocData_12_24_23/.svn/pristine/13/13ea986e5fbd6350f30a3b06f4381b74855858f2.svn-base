/*
 * ECE 480 Spring 2011
 * Team 2 Design Project
 * Matt Gottshall
 * Jake D'Onofrio
 * Gordie Stein
 * Andrew Kling
 */
package com.modou.loc.module.map2;

import java.nio.FloatBuffer;

import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.opengl.GLES20;

public abstract class GraphicsObject {
	
	protected int mProgram; // 自定义渲染管线着色器程序id
	protected int muMVPMatrixHandle; // 总变换矩阵引用
	protected int maPositionHandle; // 顶点位置属性引用
	protected int maColorHandle; // 顶点颜色属性引用
	protected String mVertexShader; // 顶点着色器代码脚本
	protected String mFragmentShader; // 片元着色器代码脚本
	
	protected FloatBuffer mVertexBuffer; // 顶点坐标数据缓冲
	protected FloatBuffer mColorBuffer; // 顶点着色数据缓冲
	protected int vCount; // 顶点数量
	
	protected Context mContext;
	
	public GraphicsObject(Context ctx) {
		this.mContext = ctx;
	}
	
//	protected void init() {
//		initVertexData();
//		initShader(ctx);
//	}
	
	protected void addPoint(float x, float y) {
		addPoint(x, y, 0);
	}
	
	protected void addPoint(float x, float y, float z) {
		
	}
	
	/**初始化顶点坐标与着色数据的方法*/
	protected void initVertexData() {
		
	}
	
	/**初始化着色器方法*/
	public void initShader(Context ctx) {
		// 加载顶点着色器的脚本内容
		mVertexShader = ShaderUtil.loadFromAssetsFile("vertex.sh", ctx.getResources());
		// 加载片元着色器的脚本内容
		mFragmentShader = ShaderUtil.loadFromAssetsFile("frag.sh", ctx.getResources());
		// 基于顶点着色器与片元着色器创建程序
		mProgram = ShaderUtil.createProgram(mVertexShader, mFragmentShader);
		// 创建程序中顶点位置属性引用id
		maPositionHandle = GLES20.glGetAttribLocation(mProgram, "aPosition");
		// 获取程序中顶点颜色属性引用id
		maColorHandle = GLES20.glGetAttribLocation(mProgram, "aColor");
		// 获取程序中总变换矩阵引用id
		muMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");
	}
	
	public abstract void Draw(GL10 gl);
}
