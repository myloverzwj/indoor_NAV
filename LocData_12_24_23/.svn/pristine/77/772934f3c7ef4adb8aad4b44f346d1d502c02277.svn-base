package com.modou.loc.module.map2;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import com.modou.loc.module.map2.config.CoordUtil;
import com.modou.loc.module.map2.config.MapConfig;

import android.content.Context;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView.Renderer;
import android.opengl.Matrix;
import android.util.Log;

/**
 * @author 作者 E-mail: xyylchq@163.com
 * @version 创建时间: 2014-7-30 上午8:31:31
 * 类说明:
 * 场景渲染器
 */
public class SceneRenderer implements Renderer {

	private Context mContext;
	private Map mMap;
	
	private String buildID = "1000020"; //TODO 测试地图ID
	
	public SceneRenderer(Context ctx) {
		mContext = ctx;
	}
	
	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {
		//设置屏幕背景色RGBA
        GLES20.glClearColor(0.5f,0.5f,0.5f, 1.0f);  
        mMap = new Map(mContext);
        //打开深度检测
        GLES20.glEnable(GLES20.GL_DEPTH_TEST);
        //打开背面剪裁   
        GLES20.glEnable(GLES20.GL_CULL_FACE);
	}

	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {
		screenWidth = width;
		screenHeight = height;
		CoordUtil.init(screenWidth, screenHeight);
		
		MapConfig.getInstance().initMapData();
		mMap.initData();
		mMap.setScreenSize(screenWidth, screenHeight);
		
		
		Log.d("mylog", "screenW====" + screenWidth + " ,screenH===" + screenHeight);
		
		//设置视窗大小及位置 
    	GLES20.glViewport(0, 0, width, height);
    	//计算GLSurfaceView的宽高比
        Constant.ratio = (float) width / height;
        // 调用此方法计算产生透视投影矩阵
        MatrixState.setProjectFrustum(-Constant.ratio, Constant.ratio, -1, 1, 20, 100);
		// 调用此方法产生摄像机9参数位置矩阵
		MatrixState.setCamera(0, 8f, 30, 0f, 0f, 0f, 0f, 1.0f, 0.0f);
        
        //初始化变换矩阵
        MatrixState.setInitStack();
	}

	@Override
	public void onDrawFrame(GL10 gl) {
		//清除深度缓冲与颜色缓冲
        GLES20.glClear( GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);
        MatrixState.pushMatrix();
        MatrixState.translate(xOffset, yOffset, 0);
        MatrixState.scale(zoom, zoom, 0);
//        Log.d("mylog", "dx=====" + x + " ,dy===" + y);
        mMap.Draw(gl);
        MatrixState.popMatrix();
	}

	float x,y;
	public void move(float dx, float dy) {
		xOffset = dx;
		yOffset = dy;
//		x+= dx;
//		y += dy;
//		mMap.move(dx, dy);
	}
	
	
	private float zoom = 1;
	private float xOffset = 0;
	private float yOffset = 0;
	private int screenWidth, screenHeight;
	public void MoveCamera(float x, float y) {
		xOffset += 2.0f * x / screenWidth;
		yOffset += 2.0f * y / screenHeight;
//		Log.d("mylog", "xOffset=" + xOffset + " ,yOffset=" + yOffset);
	}

	public void zoomIn() {
		zoom -= 0.025;
		if (zoom <= 0.5)
			zoom = 0.5f;
	}

	public void zoomOut() {
		zoom += 0.025;
		if (zoom >= 1.5)
			zoom = 2;
	}

	/**
	 * 切换楼层
	 * @param floorIndex	楼层索引
	 */
	public void changeFloor(int floorIndex) {
		mMap.reloadMap(floorIndex);
	}
	
	

}
