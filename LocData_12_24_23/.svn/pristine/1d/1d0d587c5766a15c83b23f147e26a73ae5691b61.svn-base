//jni.c
#define TAG "fs_jni"

#include <android/log.h>
#include <string.h>
#include "jniUtils.h"
#include <jni.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <stdlib.h>
#include <fcntl.h>
#include <stdio.h>
#include "floor.h"
#include "particle_filter.h"
#include "sensor_data.h"
using namespace std;


static Paticle_filter particle_filter1(1000);
static Floor floor1(jstring("floor1"));
static sensor_data GyroscopeData;
static sensor_data AccelerometerData;
static sensor_data MagneticData;


#define LOG_TAG "debug log"
#define LOGI(fmt, args...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, fmt, ##args)


/**
 * 添加wifi数据
 */
void addWifiData(char const* macAddress, long curTime, int signalStrength) {


//	LOGI("--------------addWifiData------------%s, %ld, %d", macAddress, curTime, signalStrength);
}

/**
 * 添加陀螺仪传感器数据
 */
void addGyroscopeData(char const* name, char const* vendor, int accuracy,
		long timestamp, float xAxis, float yAxis, float zAxis, int type,
		int version, float maximumRange, float power, float resolution) {

}

/**
 * 添加磁阻传感器数据
 */
void addMagneticData(char const* name, char const* vendor, int accuracy,
		long timestamp, float xAxis, float yAxis, float zAxis, int type,
		int version, float maximumRange, float power, float resolution) {

}

/**
 * 添加加速度传感器
 */
void addAccelerometerData(char const* name, char const* vendor, int accuracy,
		long timestamp, float xAxis, float yAxis, float zAxis, int type,
		int version, float maximumRange, float power, float resolution) {

}

extern "C" void Java_com_modou_loc_data_transfer_DataTransferMgr2_initLoc(
		JNIEnv* env, jobject thiz, jstring fileName, jboolean flag,
		jobjectArray arr) {

	//地图文件名
	const char* filename_char = env->GetStringUTFChars(fileName, NULL);
	LOGI("---------------initLoc--------%s, %d", filename_char, flag);
	env->ReleaseStringUTFChars(fileName, filename_char);
	env->DeleteLocalRef(fileName);

	if (arr)
	{
		jobject obj;
		jclass objCls;
		jmethodID methodId;
		jsize size = env->GetArrayLength(arr);
		for (int i = 0; i < size; i++)
		{
			// 从数组中获得对象
			obj = env->GetObjectArrayElement(arr, i);
			if (!obj)
				continue;
			// 获得对象的句柄
			objCls = env->GetObjectClass(obj);
			if (!objCls)
				continue;
			// 获得对象中的getMacAddress方法的id
			methodId = env->GetMethodID(objCls, "getMacAddress",
					"()Ljava/lang/String;");
			jstring macAddress = (jstring) env->CallObjectMethod(obj, methodId,
					NULL);
			const char* macAds_char = env->GetStringUTFChars(macAddress, NULL);
			// 获得对象中的getCurTime方法的id
			methodId = env->GetMethodID(objCls, "getCurTime", "()J");
			jlong curTime = (jlong) env->CallLongMethod(obj, methodId, NULL);
			// 获得对象中的getSignalStrength方法的id
			methodId = env->GetMethodID(objCls, "getSignalStrength", "()I");
			jint signalStrength = (jint) env->CallIntMethod(obj, methodId,
					NULL);

			//TODO 赋值给C端
			LOGI("---------------initLoc----------%s, %ld, %d", macAds_char, (long)curTime, signalStrength);

			env->DeleteLocalRef(objCls);
			env->DeleteLocalRef(obj);
			env->ReleaseStringUTFChars(macAddress, macAds_char);
			env->DeleteLocalRef(macAddress);
		}
		env->DeleteLocalRef(arr);
	}


}

extern "C" jobjectArray Java_com_modou_loc_data_transfer_DataTransferMgr2_getUserTrack(
		JNIEnv* env, jobject thiz, jobjectArray wifiArr, jint wifiStart,
		jint wifiEnd, jobjectArray gyroscopeArr, jint gyroscopeStart,
		jint gyroscopeEnd, jobjectArray magneticArr, jint magneticStart,
		jint magneticEnd, jobjectArray accelerometerArr,
		jint accelerometerStart, jint accelerometerEnd) {

//	LOGI("----------getUserTrack method-------------");

	//=================解析java层传递的数据======================
	jobject obj;
	jclass objCls;
	jmethodID methodId;
	int i;
	jsize size;
	if (wifiArr) {
		size = env->GetArrayLength(wifiArr);
		//=============================遍历wifi数组数据==================================
		for (i = 0; i < size; i++) {
			// 从数组中获得对象
			obj = env->GetObjectArrayElement(wifiArr, i);
			if (!obj)
				continue;
			// 获得对象的句柄
			objCls = env->GetObjectClass(obj);
			if (!objCls)
				continue;
			// 获得对象中的getMacAddress方法的id
			methodId = env->GetMethodID(objCls, "getMacAddress",
					"()Ljava/lang/String;");
			jstring macAddress = (jstring) env->CallObjectMethod(obj, methodId,
					NULL);
			const char* macAds_char = env->GetStringUTFChars(macAddress, NULL);
			//TODO macAddress传递给c的时候估计应该还需转换成char类型
			// 获得对象中的getCurTime方法的id
			methodId = env->GetMethodID(objCls, "getCurTime", "()J");
			jlong curTime = (jlong) env->CallLongMethod(obj, methodId, NULL);
			// 获得对象中的getSignalStrength方法的id
			methodId = env->GetMethodID(objCls, "getSignalStrength", "()I");
			jint signalStrength = (jint) env->CallIntMethod(obj, methodId,
					NULL);

			// 调用添加wifi数据函数
			addWifiData(macAds_char, curTime, signalStrength);
//			LOGI("---------------getUserTrack-----wifiData-----%s, %ld, %d", macAds_char, (long)curTime, signalStrength);

			env->DeleteLocalRef(objCls);
			env->DeleteLocalRef(obj);
			env->ReleaseStringUTFChars(macAddress, macAds_char);
			env->DeleteLocalRef(macAddress);
		}
		env->DeleteLocalRef(wifiArr);
	}

	//=============================遍历wifi数组数据结束==================================

	// ==============================遍历陀螺仪数据数组===================================
	if (gyroscopeArr) {
		size = env->GetArrayLength(gyroscopeArr);
		for (i = 0; i < size; i++) {
			// 从数组中获得对象
			obj = env->GetObjectArrayElement(gyroscopeArr, i);
			if (!obj)
				continue;
			// 获得对象的句柄
			jclass objCls = env->GetObjectClass(obj);
			if (!objCls)
				continue;
			// 获得对象中的getAccuracy方法的id
			methodId = env->GetMethodID(objCls, "getAccuracy", "()I");
			jint accuracy = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getTimestamp方法的id
			methodId = env->GetMethodID(objCls, "getTimestamp", "()J");
			jlong timestamp = (jlong) env->CallLongMethod(obj, methodId, NULL);
			// 获得对象中的getxAxis方法的id
			methodId = env->GetMethodID(objCls, "getxAxis", "()F");
			jfloat xAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getyAxis方法的id
			methodId = env->GetMethodID(objCls, "getyAxis", "()F");
			jfloat yAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getzAxis方法的id
			methodId = env->GetMethodID(objCls, "getzAxis", "()F");
			jfloat zAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getType方法的id
			methodId = env->GetMethodID(objCls, "getType", "()I");
			jint type = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getTimestamp方法的id
			methodId = env->GetMethodID(objCls, "getVersion", "()I");
			jint version = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getMaximumRange方法的id
			methodId = env->GetMethodID(objCls, "getMaximumRange", "()F");
			jfloat maximumRange = (jfloat) env->CallFloatMethod(obj, methodId,
					NULL);
			// 获得对象中的getName方法的id
			methodId = env->GetMethodID(objCls, "getName",
					"()Ljava/lang/String;");
			jstring name = (jstring) env->CallObjectMethod(obj, methodId, NULL);
			const char *name_char = env->GetStringUTFChars(name, NULL);
			// 获得对象中的getPower方法的id
			methodId = env->GetMethodID(objCls, "getPower", "()F");
			jfloat power = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getResolution方法的id
			methodId = env->GetMethodID(objCls, "getResolution", "()F");
			jfloat resolution = (jfloat) env->CallFloatMethod(obj, methodId,
					NULL);
			// 获得对象中的getResolution方法的id
			methodId = env->GetMethodID(objCls, "getVendor",
					"()Ljava/lang/String;");
			jstring vendor = (jstring) env->CallObjectMethod(obj, methodId,
					NULL);
			const char *vendor_char = env->GetStringUTFChars(vendor, NULL);

			addGyroscopeData(name_char, vendor_char, accuracy, timestamp, xAxis,
					yAxis, zAxis, type, version, maximumRange, power,
					resolution);
//			LOGI("---------------getUserTrack-----陀螺仪数据-----%f, %f, %f", xAxis, yAxis, zAxis);

			env->ReleaseStringUTFChars(name, name_char);
			env->ReleaseStringUTFChars(vendor, vendor_char);
			env->DeleteLocalRef(objCls);
			env->DeleteLocalRef(obj);
			env->DeleteLocalRef(name);
			env->DeleteLocalRef(vendor);
		}
		env->DeleteLocalRef(gyroscopeArr);
	}
	// ==============================遍历陀螺仪数据数组结束===================================

	// ==============================遍历磁阻传感器数据数组===================================
	if (magneticArr) {
		size = env->GetArrayLength(magneticArr);
		for (i = 0; i < size; i++) {
			// 从数组中获得对象
			obj = env->GetObjectArrayElement(magneticArr, i);
			if (!obj)
				continue;
			// 获得对象的句柄
			jclass objCls = env->GetObjectClass(obj);
			if (!objCls)
				continue;
			// 获得对象中的getAccuracy方法的id
			methodId = env->GetMethodID(objCls, "getAccuracy", "()I");
			jint accuracy = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getTimestamp方法的id
			methodId = env->GetMethodID(objCls, "getTimestamp", "()J");
			jlong timestamp = (jlong) env->CallLongMethod(obj, methodId, NULL);
			// 获得对象中的getxAxis方法的id
			methodId = env->GetMethodID(objCls, "getxAxis", "()F");
			jfloat xAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getyAxis方法的id
			methodId = env->GetMethodID(objCls, "getyAxis", "()F");
			jfloat yAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getzAxis方法的id
			methodId = env->GetMethodID(objCls, "getzAxis", "()F");
			jfloat zAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getType方法的id
			methodId = env->GetMethodID(objCls, "getType", "()I");
			jint type = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getTimestamp方法的id
			methodId = env->GetMethodID(objCls, "getVersion", "()I");
			jint version = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getMaximumRange方法的id
			methodId = env->GetMethodID(objCls, "getMaximumRange", "()F");
			jfloat maximumRange = (jfloat) env->CallFloatMethod(obj, methodId,
					NULL);
			// 获得对象中的getName方法的id
			methodId = env->GetMethodID(objCls, "getName",
					"()Ljava/lang/String;");
			jstring name = (jstring) env->CallObjectMethod(obj, methodId, NULL);
			const char *name_char = env->GetStringUTFChars(name, NULL);
			// 获得对象中的getPower方法的id
			methodId = env->GetMethodID(objCls, "getPower", "()F");
			jfloat power = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getResolution方法的id
			methodId = env->GetMethodID(objCls, "getResolution", "()F");
			jfloat resolution = (jfloat) env->CallFloatMethod(obj, methodId,
					NULL);
			// 获得对象中的getResolution方法的id
			methodId = env->GetMethodID(objCls, "getVendor",
					"()Ljava/lang/String;");
			jstring vendor = (jstring) env->CallObjectMethod(obj, methodId,
					NULL);
			const char *vendor_char = env->GetStringUTFChars(vendor, NULL);

			addMagneticData(name_char, vendor_char, accuracy, timestamp, xAxis,
					yAxis, zAxis, type, version, maximumRange, power,
					resolution);
//			LOGI("---------------getUserTrack-----磁阻传感器数据-----%f, %f, %f", xAxis, yAxis, zAxis);

			env->ReleaseStringUTFChars(name, name_char);
			env->ReleaseStringUTFChars(vendor, vendor_char);
			env->DeleteLocalRef(objCls);
			env->DeleteLocalRef(name);
			env->DeleteLocalRef(vendor);
		}
		env->DeleteLocalRef(magneticArr);
	}
	// ==============================遍历陀螺仪数据数组结束===================================

	// ==============================遍历加速度传感器数据数组===================================
	if (accelerometerArr) {
		size = env->GetArrayLength(accelerometerArr);
		for (i = 0; i < size; i++) {
			// 从数组中获得对象
			obj = env->GetObjectArrayElement(accelerometerArr, i);
			if (!obj)
				continue;
			// 获得对象的句柄
			jclass objCls = env->GetObjectClass(obj);
			if (!objCls)
				continue;
			// 获得对象中的getAccuracy方法的id
			methodId = env->GetMethodID(objCls, "getAccuracy", "()I");
			jint accuracy = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getTimestamp方法的id
			methodId = env->GetMethodID(objCls, "getTimestamp", "()J");
			jlong timestamp = (jlong) env->CallLongMethod(obj, methodId, NULL);
			// 获得对象中的getxAxis方法的id
			methodId = env->GetMethodID(objCls, "getxAxis", "()F");
			jfloat xAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getyAxis方法的id
			methodId = env->GetMethodID(objCls, "getyAxis", "()F");
			jfloat yAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getzAxis方法的id
			methodId = env->GetMethodID(objCls, "getzAxis", "()F");
			jfloat zAxis = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getType方法的id
			methodId = env->GetMethodID(objCls, "getType", "()I");
			jint type = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getTimestamp方法的id
			methodId = env->GetMethodID(objCls, "getVersion", "()I");
			jint version = (jint) env->CallIntMethod(obj, methodId, NULL);
			// 获得对象中的getMaximumRange方法的id
			methodId = env->GetMethodID(objCls, "getMaximumRange", "()F");
			jfloat maximumRange = (jfloat) env->CallFloatMethod(obj, methodId,
					NULL);
			// 获得对象中的getName方法的id
			methodId = env->GetMethodID(objCls, "getName",
					"()Ljava/lang/String;");
			jstring name = (jstring) env->CallObjectMethod(obj, methodId, NULL);
			const char *name_char = env->GetStringUTFChars(name, NULL);
			// 获得对象中的getPower方法的id
			methodId = env->GetMethodID(objCls, "getPower", "()F");
			jfloat power = (jfloat) env->CallFloatMethod(obj, methodId, NULL);
			// 获得对象中的getResolution方法的id
			methodId = env->GetMethodID(objCls, "getResolution", "()F");
			jfloat resolution = (jfloat) env->CallFloatMethod(obj, methodId,
					NULL);
			// 获得对象中的getResolution方法的id
			methodId = env->GetMethodID(objCls, "getVendor",
					"()Ljava/lang/String;");
			jstring vendor = (jstring) env->CallObjectMethod(obj, methodId,
					NULL);
			const char *vendor_char = env->GetStringUTFChars(vendor, NULL);

			addAccelerometerData(name_char, vendor_char, accuracy, timestamp, xAxis,
					yAxis, zAxis, type, version, maximumRange, power,
					resolution);
//			LOGI("---------------getUserTrack-----加速度传感器数据-----%f, %f, %f", xAxis, yAxis, zAxis);

			env->ReleaseStringUTFChars(name, name_char);
			env->ReleaseStringUTFChars(vendor, vendor_char);
			env->DeleteLocalRef(objCls);
			env->DeleteLocalRef(obj);
			env->DeleteLocalRef(name);
			env->DeleteLocalRef(vendor);
		}
		env->DeleteLocalRef(accelerometerArr);
	}
	// ==============================遍历加速度传感器数据数组结束===================================

	//================java层数据解析完毕========================

	//==================C++层生成对象数据数组返回给java层====================

	// 定义数组中的元素类型
	jsize pArrSize = 1;// 目前定义对象数组大小就为1，每次返回1个点
	jclass pointCls = env->FindClass("com/modou/loc/module/map2/Point");
	jobjectArray pointArr = env->NewObjectArray(pArrSize, pointCls, NULL);
	jobject point;
	jmethodID consID = env->GetMethodID(pointCls, "<init>", "()V");
	jfieldID xID = env->GetFieldID(pointCls, "x", "F");
	jfieldID yID = env->GetFieldID(pointCls, "y", "F");
	for (i = 0; i < pArrSize; i++) {
		point = (jobject) env->NewObject(pointCls, consID);
		env->SetObjectArrayElement(pointArr, i, point);
		env->SetFloatField(point, xID, particle_filter1.get_x());
		env->SetFloatField(point, yID, particle_filter1.get_y());
	}

	return pointArr;
	//==================C++层返回数据处理完毕=============================
}

