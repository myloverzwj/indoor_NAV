#ifndef PARTICLE_FILTER_H
#define PARTICLE_FILTER_H


#include "particle_chain.h"
#include "floor.h"


class Paticle_filter
{
public:
	Paticle_filter(int num);
	~Paticle_filter();
	void initialization (float x,float y,float det_x1, float det_y1);
	void prediction (float l,float det_l,float d,float det_d);
	void delete_particle();
	void caldet();
	void calave();
	float get_x();
	float get_y();
private:
	int max_num;
	particle_chain particles;
	float x_,y_;
	float lanmuda,sita;
	float det_x,det_y;


};

Paticle_filter::Paticle_filter(int num)
{
	max_num = num;
}

Paticle_filter::~Paticle_filter()
{
}

float Paticle_filter::get_x()
{
	return x_;
}

float Paticle_filter::get_y()
{
	return y_;
}
void Paticle_filter::delete_particle()
{
	particles.reset();
	while (particles.get_current()->next)
	{
		if (particles.current->width<1/(particles.Num*particles.Num))
		{
			particles.delete_node();
		}
	}
//	particles.reset();
//	while (particles.get_current()->next){
//		if (floor->findroom(particles.get_current()->x,particles.get_current()->y)!=floor->findroom(particles.get_current()->x_f,particles.get_current()->y_f)
//				||floor->findroom(particles.get_current()->x,particles.get_current()->y)->finddoor(floor->findroom(particles.get_current()->x_f,particles.get_current()->y_f))==0)
//		{
//			particles.delete_node();
//		}
//	}

}
void Paticle_filter::initialization(float x,float y,float det_x1, float det_y1)
{
	float x1,y1;
	particles.reset();
	for (int i=0;i<max_num;i++)
	{
		srand(time(NULL)+i+1);
		x=gaussrand()*det_x1+x;
		srand(time(NULL)-i-1);
		y=gaussrand()*det_y1+y;
		particles.insert_node(x,y,1/float(max_num));
	}
}

void Paticle_filter::prediction(float l,float det_l,float d,float det_d)
{
	particle *p= particles.get_head();
	for (int i=0;i<particles.get_num();i++)
	{
		srand((time(NULL))+i+2);
		int gaus1=gaussrand();
		srand((time(NULL))-i+2);
		p->change_xy(l+gaus1*det_l,d+gaussrand()*det_d);
		p=p->next;
	}
	x_+=l*cos(d);
	y_+=l*sin(d);
	p=particles.get_head();
	for (int i=0;i<particles.get_num();i++)
	{
		p->chang_width(guassvalue((p->get_x()-x_)/det_x, (p->get_y()-y_)/det_y));
	}
	delete_particle();
	particles.reset_w();
}

void Paticle_filter::caldet()
{
	particle *p = particles.get_head();
	det_x = det_y = 0;
	for (int i=0; i<particles.get_num(); i++)
	{
		det_x+=(p->get_x()-x_)*(p->get_x()-x_)*p->get_width();
		det_y+=(p->get_y()-y_)*(p->get_y()-y_)*p->get_width();
		p=p->next;


		//p = p->next;
	}
}
void Paticle_filter::calave()
{
	particle *p = particles.get_head();
	x_ = y_ =0;
	for (int i=0;i<particles.get_num(); i++)
	{
		x_+=p->get_x()*p->get_width();
		y_+=p->get_y()*p->get_width();
	}
	det_x = sqrt(det_x);
	det_y = sqrt(det_y);
}
#endif
